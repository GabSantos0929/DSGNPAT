import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * A custom dialog for creating new items in the vending machine.
 * This class extends JDialog and implements ActionListener to handle user input for item creation.
 */
public class ItemInputDialog extends JDialog implements ActionListener {
    private JTextField nameField;
    private JTextField priceField;
    private JTextField quantityField;
    private JButton createButton;

    private String itemName;
    private List<String> itemNames;
    private double itemPrice;
    private int itemQuantity;

    /**
     * Constructor for creating the ItemInputDialog dialog.
     * @param owner             The parent Frame of the dialog.
     * @param title             The title of the dialog.
     * @param modal             A boolean indicating whether the dialog should be modal (true) or modeless (false).
     * @param existingItemNames A List of existing item names to check for name uniqueness.
     */
    public ItemInputDialog(Frame owner, String title, boolean modal, List<String> existingItemNames) {
        super(owner, title, modal);
        setLayout(new BorderLayout());
        this.itemNames = existingItemNames;

        JPanel inputPanel = new JPanel(new GridLayout(4, 2, 10, 10));

        JLabel titleLabel = new JLabel("What kind of item would you like to create?");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 15));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);

        inputPanel.add(new JLabel("Item Name:"));
        nameField = new JTextField();
        inputPanel.add(nameField);

        inputPanel.add(new JLabel("Item Price:"));
        priceField = new JTextField();
        inputPanel.add(priceField);

        inputPanel.add(new JLabel("Item Quantity:"));
        quantityField = new JTextField();
        inputPanel.add(quantityField);

        createButton = new JButton("Create");
        createButton.addActionListener(this);

        add(inputPanel, BorderLayout.CENTER);
        add(titleLabel, BorderLayout.NORTH);
        add(createButton, BorderLayout.SOUTH);

        pack();
        setLocationRelativeTo(owner);
        setSize(450, 200);
        setResizable(false);
        setVisible(true);
        setModal(false);
    }

    
    /**
     * Handles the actionPerformed event when the "Create" button is clicked.
     * @param e The ActionEvent generated by the "Create" button.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == createButton) {
            itemName = nameField.getText();

            if (isItemNameTaken(itemName)) {
                JOptionPane.showMessageDialog(this, "Item name already exists. Enter a unique name.");
                return;
            }

            itemPrice = Double.parseDouble(priceField.getText());

            itemQuantity = Integer.parseInt(quantityField.getText());

            if(itemQuantity < 10) {
                JOptionPane.showMessageDialog(this, "Item quantity should be at least 10. Enter a valid input");
                return;
            }

            dispose();
        }
    }

    /**
     * Checks if the given item name is already taken (exists in the list of item names).
     * @param itemName The name of the item to check for uniqueness.
     * @return true if the item name is already taken, false otherwise.
     */
    private boolean isItemNameTaken(String itemName) {
        return itemNames.contains(itemName.toLowerCase());
    }

    /**
     * Gets the name of the item entered in the dialog.
     * @return The name of the item.
     */
    public String getItemName() {
        return itemName;
    }

    /**
     * Gets the price of the item entered in the dialog.
     * @return The price of the item.
     */
    public double getItemPrice() {
        return itemPrice;
    }

    /**
     * Gets the quantity of the item entered in the dialog.
     * @return The quantity of the item.
     */
    public int getItemQuantity() {
        return itemQuantity;
    }

}